<?php

namespace UserManagement\Controller\Admin;

use Micro\Application\Controller\Crud;
use Micro\Model\EntityInterface;
use Micro\Form\Form;
use Micro\Helper\Files;
use Micro\Cache;
use UserManagement\Model\Groups as GroupsModel;

class Groups extends Crud
{
    protected $model = GroupsModel::class;

    protected $scope = 'admin';

    protected function prepareForm(Form $form, EntityInterface $item)
    {
        try {

            $resources = [];

            if ($item['id']) {
                $access = $item['rights'];
                if ($access) {
                    $access = json_decode($access, \true);
                    $access = $access ? $access : [];
                    foreach ($access as $resource => $junk) {
                        $resources[str_replace(["\\", "@"], "_", $resource)] = $junk;
                    }
                }
            }

            if ($this->request->isPost()) {
                $resources = json_decode($this->request->getPost('rights', ''), \true);
                $resources = $resources ? array_flip($resources) : [];
            }

            $tree = $this->buildTree(
                Files::fetchControllers(),
                $resources
            );

        } catch (\Exception $e) {

            $tree = [];
        }

        $this->view->assign('tree', $tree);
    }

    protected function modifyEntity(EntityInterface $entity)
    {
        $resources = json_decode($this->request->getPost('rights', ''), \true);
        $resources = $resources ? array_flip($resources) : [];

        $rights = [];

        foreach ($resources as $resource => $junk) {
            $resource = str_replace('_', "\\", $resource);
            $resource = explode("\\", $resource);
            $action = $resource[count($resource) - 1];
            unset($resource[count($resource) - 1]);
            $rights[implode("\\", $resource) . "@" . $action] = \true;
        }

        $entity['rights'] = json_encode($rights);

        if (($cache = app('cache')) instanceof Cache\Core) {
            $cache->remove('Acl');
        }
    }

    public function buildTree(array $items, array $accessRights)
    {
        /**
         {
         id          : "string" // will be autogenerated if omitted
         text        : "string" // node text
         icon        : "string" // string for custom
         state       : {
         opened    : boolean  // is the node open
         disabled  : boolean  // is the node disabled
         selected  : boolean  // is the node selected
         },
         children    : []  // array of strings or objects
         li_attr     : {}  // attributes for the generated LI node
         a_attr      : {}  // attributes for the generated A node
         }
         */

        $tree = array();

        foreach ($items as $item) {

            $sibling = array(
                'id' => $item['id'],
                'text' => $item['name']
            );

            if (isset($accessRights[$item['id']])) {
                $sibling['state']['selected'] = \true;
            }

            if (!empty($item['resources'])) {
                $sibling['children'] = $this->buildTree($item['resources'], $accessRights);
            } else {
                $sibling['icon'] = 'jstree-file';
            }


            $tree[] = $sibling;
        }

        return $tree;
    }
}